bool GetMazePathR(int maze[][N], size_t n, Pos cur,
                  stack<Pos>& shortPath, stack<Pos>& path)
{
    path.push(cur);
    if (cur._row == n-1)
    {
        if (shortPath.empty() || path.size() < shortPath.size())
        {
            shortPath = path;
        }

        //return true;
    }

    //maze[cur._row][cur._col] = 2;
    Pos next;

    // 上
    next = cur;
    next._row -= 1;
    if (CheckAccess(maze, n, cur, next))
    {
        maze[next._row][next._col] = maze[cur._row][cur._col]+1;
        if(GetMazePathR(maze, n, next, shortPath, path))
            return true;
    }

    // 右
    next = cur;
    next._col += 1;
    if (CheckAccess(maze, n, cur, next))
    {
        maze[next._row][next._col] = maze[cur._row][cur._col]+1;
        //if (GetMazePathR(maze, n, next))
        if(GetMazePathR(maze, n, next, shortPath, path))
            return true;
    }

    // 下
    next = cur;
    next._row += 1;
    if (CheckAccess(maze, n, cur, next))
    {
        maze[next._row][next._col] = maze[cur._row][cur._col]+1;
        //if (GetMazePathR(maze, n, next))
        if(GetMazePathR(maze, n, next, shortPath, path))
            return true;
    }

    // 左
    next = cur;
    next._col -= 1;
    if (CheckAccess(maze, n, cur, next))
    {
        maze[next._row][next._col] = maze[cur._row][cur._col]+1;
        //if (GetMazePathR(maze, n, next))
        if(GetMazePathR(maze, n, next, shortPath, path))
            return true;
    }

    path.pop();

    return false;
}

int main()
{
    int maze[N][N];
    InitMaze(maze);
    PrintMaze(maze);

    Pos entry = { 1,0 };
    //GetMazePath(maze, entry);
    //PrintMaze(maze);


    stack<Pos>path;
    stack<Pos>shortPath;
    GetMazePathR(maze,N,entry,shortPath,path );
    PrintMaze(maze);

    return 0;
}
